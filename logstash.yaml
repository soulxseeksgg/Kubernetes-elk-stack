# deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: elk
  labels:
    app: logstash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
        - name: logstash
          image: docker.elastic.co/logstash/logstash:7.2.0
          resources:
            limits:
              cpu: 1200m
              memory: 1Gi
          ports:
            - containerPort: 5044
              name: beats-input

          volumeMounts:
            - name: logstash-config-reload
              mountPath: /usr/share/logstash/config/logstash.yml
              subPath: logstash.yml

            - name: logstash-pipelines
              mountPath: /usr/share/logstash/config/pipelines.yml
              subPath: pipelines.yml

            - name: logstash-main-input
              mountPath: /usr/share/logstash/pipeline/main-input.conf
              subPath: main-input.conf

            - name: logstash-myapp-pipeline
              mountPath: /usr/share/logstash/pipeline/myapp-pipeline.conf
              subPath: myapp-pipeline.conf

            - name: logstash-redis-pipeline
              mountPath: /usr/share/logstash/pipeline/redis-pipeline.conf
              subPath: redis-pipeline.conf

            - name: logstash-pattern
              mountPath: /usr/share/logstash/pattern/mypattern.patterns
              subPath: mypattern.patterns  

            - name: logstash-data
              mountPath: /usr/share/logstash/data/

      volumes:
        - name: logstash-config-reload
          configMap:
            name: logstash-configmap

        - name: logstash-pipelines
          configMap:
            name: logstash-configmap    

        - name: logstash-main-input
          configMap:
            name: logstash-configmap
                
        - name: logstash-myapp-pipeline
          configMap:
            name: logstash-configmap

        - name: logstash-redis-pipeline
          configMap:
            name: logstash-configmap      

        - name: logstash-pattern
          configMap:
            name: logstash-configmap

        - name: logstash-data
          persistentVolumeClaim:
            claimName: logstash-pvc 

---   
#PV & PVC
apiVersion: v1
kind: PersistentVolume
metadata:
  name: logstash-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: hostpath
  hostPath:
    path: /usr/share/logstash/data/ 

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logstash-pvc
  namespace: elk 
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: hostpath  

---
#config map   
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-configmap
  namespace: elk
data:
  
  logstash.yml: |
    config.reload.automatic: true
    config.reload.interval: 3s
  

  pipelines.yml: |
    - pipeline.id: main-input
      path.config: "/usr/share/logstash/pipeline/main-input.conf"

    - pipeline.id: myapp-pipeline
      path.config: "/usr/share/logstash/pipeline/myapp-pipeline.conf"

    - pipeline.id: redis-pipeline
      path.config: "/usr/share/logstash/pipeline/redis-pipeline.conf"
  

  main-input.conf: |
    input {
      beats {
        port => 5044
        type => "beats"
      }
    }

    output {
      if [appname][app] == "myapp" {
        pipeline { send_to => "myapp-pipeline" }
      } else if [appname][app] == "redis" {
        pipeline { send_to => "redis-pipeline" }
      }
    }

  myapp-pipeline.conf: |
    input {
      pipeline {
        address => "myapp-pipeline"
      }
    }

    filter {
    
      grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{DATA:log_level} %{NUMBER:pid} --- \[%{DATA:thread}\] %{DATA:class} : %{GREEDYDATA:messages}" }
      }

      date {
        match => ["timestamp", "ISO8601"]
        target => "event_timestamp"
      }

      if "_grokparsefailure" in [tags] {
        mutate {
          add_field => { "parse_status" => "failed" }
        }
      }

      mutate {
        gsub => [ 
          "messages", "^\s+|\s+$", ""
          ,"log_level", "^\s+|\s+$", ""
          ,"class", "^\s+|\s+$", ""
        ]
        
        remove_field => ["agent","ecs","@version","tags","timestamp","pid","message"]
      }

    }

    output {

        stdout { codec => rubydebug }

        if [parse_status] == "failed" {
          elasticsearch {
            hosts => ["http://elasticsearch:9200"]
            index => "log-failed-%{[appname][app]}-%{+yyyyMMdd}"
          }
        } else {
          elasticsearch {
            hosts => ["http://elasticsearch:9200"]
            index => "log-%{[appname][app]}-%{+yyyyMMdd}"
          }
        }
      
    }

  redis-pipeline.conf: |
    input {
      pipeline {
        address => "redis-pipeline"
      }
    }

    filter {
      grok {
          patterns_dir => ["/usr/share/logstash/pattern/"]

          match => { "message" => "%{REDIS_MESSAGE_TIME:timestamp} %{REDIS_LOG_SYMBOL:log_symbol} %{GREEDYDATA:messages}" }
      }

      date {
        match => ["timestamp", "ISO8601"]
        target => "event_timestamp"
      }

      if "_grokparsefailure" in [tags] {
        mutate {
          add_field => { "parse_status" => "failed" }
        }
      }

      mutate {
        gsub => [ 
          "messages", "^\s+|\s+$", ""
          ,"log_symbol", "\s+", "" 
        ]
  
        remove_field => ["agent","ecs","@version","tags","stream","host","timestamp","message"]
      }

      translate {
        field => "log_symbol"
        destination => "log_level"
        dictionary => {
          "#" => "WARNING"
          "*" => "INFO"
          "-" => "DEBUG"
          "+" => "TRACE"
        }
      }

    }

    output {

        stdout{}

        if [parse_status] == "failed" {
          elasticsearch {
            hosts => ["http://elasticsearch:9200"]
            index => "log-failed-%{[appname][app]}-%{+yyyyMMdd}"
          }
        } else {
          elasticsearch {
            hosts => ["http://elasticsearch:9200"]
            index => "log-%{[appname][app]}-%{+yyyyMMdd}"
          }
        }
      
    }

  mypattern.patterns: |
    REDIS_MESSAGE_TIME %{MONTHDAY} %{MONTH} %{YEAR} %{TIME}
    REDIS_LOG_SYMBOL [\#\*\-\+]

---
#service
apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: elk
  labels:
    app: logstash
spec:
  selector:
    app: logstash
  ports:
  - protocol: TCP
    port: 5044
    targetPort: 5044
  type: ClusterIP  



